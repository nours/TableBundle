
{# Table html theme #}
{% block table %}
    <div id="{{ id_toolbar }}">
        {% if form %}
            {% if form_theme %}
                {% form_theme form form_theme %}
            {% endif %}
            {{ form(form) }}
        {% endif %}
    </div>
    <table class="table table-stripped bootstrap-table" id="table_{{ name }}"></table>
{% endblock %}


{% block table_javascript %}
    <script type="text/javascript">
        $(function() {
            var Table = function(element, options) {
                this.table = $(element);
                this.form  = $('#{{ id_toolbar }} form');

                this.table.data('Table', this);

                options = $.extend({
                    queryParams: $.proxy(this.queryParams, this),
                    queryParamsType: 'other',
                    responseHandler: $.proxy(this.responseHandler, this),
                    columns: [
                        {% for field in table.fields -%}
                        {{- render_table_field(field, 'definition') -}}
                        {%- if not loop.last %},{% endif -%}
                        {%- endfor %}
                    ]
                }, options);

                this.table.bootstrapTable(options);
                this.form.on('change', 'input, select', $.proxy(this.refresh, this))
            };

            Table.prototype.queryParams = function(params) {
                var queryParams = $.extend({
                    page: params.pageNumber,
                    limit: params.pageSize
                }, this.getFormData());
                if (params.searchText) {
                    queryParams.search = params.searchText
                }
                if (params.sortName) {
                    queryParams.sort = params.sortName;
                    queryParams.order = params.sortName ? params.sortOrder : null
                }
                return queryParams
            };

            Table.prototype.responseHandler = function(res) {
                return {
                    total: res.total,
                    rows: res.data
                }
            };

            Table.prototype.refresh = function() {
                this.table.bootstrapTable('refresh');
            };

            Table.prototype.getFormData = function() {
                var data = {};
                var serialized = this.form.serializeArray();
                $.each(serialized, function() {
                    var name = this.name, value = this.value;
                    if (data[name] !== undefined) {
                        if (!data[name].push) {
                            data[name] = [ data[name] ];
                        }
                        data[name].push(value || '');
                    } else {
                        data[name] = value || '';
                    }
                });
                return data;
            };

            {% for field in table.fields %}
            Table.prototype.formatter{{ field.vars.class_name }} = {{ render_table_field(field, 'formatter') }}
            {% endfor %}

            {{ render_table(table, 'javascript_extra') }}

            new Table('#table_{{ name }}', {{ configs|json_encode|raw }})
        });
    </script>
    {% if form %}
        {{ form_javascript(form) }}
    {% endif %}
{% endblock %}


{% block table_javascript_extra %}{% endblock %}


{# Field definition #}
{% block field_definition %}
$.extend({
    field: '{{ name }}',
    title: '{{ label|trans }}',
    formatter: Table.prototype.formatter{{ class_name }}
    {%- if width %},width: '{{ width }}'{% endif %}
    {%- if sortable %},sortable: true{% endif %}
}, {{ configs|json_encode|raw }})
{% endblock %}


{# Field formatters #}
{% block field_formatter %}
    function (value, row, index) {
    return value
    }
{% endblock %}


{% block field_text_formatter %}
function (value, row, index) {
    value = objectPath.get(row, '{{ property_path }}')
    {% if strip_tags %}
    if (!value) return null
    value = value.replace(/(<([^>]+)>)/igm,"").replace(/(&nbsp;|\r\n|\n|\r)/g, ' ')
    {% endif %}
    {% if truncate %}
    value = '<abbr title="' + value + '">' + value.substr(0, {{ truncate }}) + '...</abbr>'
    {% endif %}
    return value
}
{% endblock %}

{% block field_boolean_formatter %}
function (value, row, index) {
    value = objectPath.get(row, '{{ property_path }}');
    return value ? '{{ true_text|raw }}' : '{{ false_text|raw }}'
}
{% endblock %}


{% block field_collection_formatter %}
function (value, row, index) {
    var html = '', first = true;
    $.each(objectPath.get(row, '{{ property_path }}'), function(index, object) {
        if (!first) {
            html += '{{ separator }}'
        }
        first = false;
        html += {% if text_path %}objectPath.get(object, '{{ text_path }}'){% else %}object{% endif %}
    })
    return html
}
{% endblock %}


{% block field_date_formatter %}
function (value, row, index) {
    value = objectPath.get(row, '{{ property_path }}');
    var date = Date.parse(value);
    if (!isNaN(date)) {
        date = new Date(date);
        return date.toLocaleString()
    }
    return null
}
{% endblock %}


{% block field_label_formatter %}
function (value, row, index) {
    value = objectPath.get(row, '{{ property_path }}');
    var style = 'default', label = '';
    switch (value) {
    {% for t, d in labels %}
        case '{{ t }}':
        style = '{{ d.style }}'
        label = '{{ d.label|default(t)|trans }}'
        break;
    {% endfor %}
    }
    return '<span class="label label-'+style+'">'+label+'</span>'
}
{% endblock %}


{%- block field_prototype_formatter -%}
function (value, row, index) {
    var html = '{{ render_table_field(field)|raw }}',
        mappings = {{ mappings|json_encode|raw }}
    $.each(mappings, function(placeholder, property_path) {
        html = html.replace(placeholder, objectPath.get(row, property_path))
    })
    return html
}
{%- endblock -%}

{%- block field_prototype -%}
{{ prototype|raw }}
{%- endblock -%}